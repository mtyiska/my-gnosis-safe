/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.2), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **multisig_transactions**
   * - Table in database
   */
  export namespace multisig_transactions {
    export type Table = 'multisig_transactions';
    export interface Selectable {
      /**
      * **multisig_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      transaction_id: string;
      /**
      * **multisig_transactions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **multisig_transactions.destination**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      destination: string;
      /**
      * **multisig_transactions.transaction_value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      transaction_value: number;
      /**
      * **multisig_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **multisig_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **multisig_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      transaction_id: string;
      /**
      * **multisig_transactions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **multisig_transactions.destination**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      destination: string;
      /**
      * **multisig_transactions.transaction_value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      transaction_value: number;
      /**
      * **multisig_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampString;
      /**
      * **multisig_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **multisig_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      transaction_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_transactions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_transactions.destination**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      destination?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_transactions.transaction_value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      transaction_value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **multisig_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      transaction_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_transactions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **multisig_transactions.destination**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      destination: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **multisig_transactions.transaction_value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      transaction_value: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **multisig_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **multisig_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      transaction_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_transactions.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **multisig_transactions.destination**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      destination?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **multisig_transactions.transaction_value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      transaction_value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **multisig_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'multisig_transactions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **multisig_users**
   * - Table in database
   */
  export namespace multisig_users {
    export type Table = 'multisig_users';
    export interface Selectable {
      /**
      * **multisig_users.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id: string;
      /**
      * **multisig_users.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      address: string;
      /**
      * **multisig_users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **multisig_users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **multisig_users.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id: string;
      /**
      * **multisig_users.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      address: string;
      /**
      * **multisig_users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **multisig_users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **multisig_users.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_users.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **multisig_users.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_users.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **multisig_users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **multisig_users.user_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      user_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_users.address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **multisig_users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'multisig_users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **multisig_wallets**
   * - Table in database
   */
  export namespace multisig_wallets {
    export type Table = 'multisig_wallets';
    export interface Selectable {
      /**
      * **multisig_wallets.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_id: string;
      /**
      * **multisig_wallets.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **multisig_wallets.walletname**
      * - `varchar` in database
      * - Nullable, no default
      */
      walletname: string | null;
      /**
      * **multisig_wallets.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **multisig_wallets.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **multisig_wallets.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_id: string;
      /**
      * **multisig_wallets.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
      /**
      * **multisig_wallets.walletname**
      * - `varchar` in database
      * - Nullable, no default
      */
      walletname: string | null;
      /**
      * **multisig_wallets.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampString;
      /**
      * **multisig_wallets.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **multisig_wallets.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_wallets.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_wallets.walletname**
      * - `varchar` in database
      * - Nullable, no default
      */
      walletname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_wallets.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **multisig_wallets.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **multisig_wallets.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_wallets.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **multisig_wallets.walletname**
      * - `varchar` in database
      * - Nullable, no default
      */
      walletname?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_wallets.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **multisig_wallets.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **multisig_wallets.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_wallets.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **multisig_wallets.walletname**
      * - `varchar` in database
      * - Nullable, no default
      */
      walletname?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_wallets.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **multisig_wallets.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'multisig_wallets_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **typeorm_metadata**
   * - Table in database
   */
  export namespace typeorm_metadata {
    export type Table = 'typeorm_metadata';
    export interface Selectable {
      /**
      * **typeorm_metadata.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **typeorm_metadata.database**
      * - `varchar` in database
      * - Nullable, no default
      */
      database: string | null;
      /**
      * **typeorm_metadata.schema**
      * - `varchar` in database
      * - Nullable, no default
      */
      schema: string | null;
      /**
      * **typeorm_metadata.table**
      * - `varchar` in database
      * - Nullable, no default
      */
      table: string | null;
      /**
      * **typeorm_metadata.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **typeorm_metadata.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
    }
    export interface JSONSelectable {
      /**
      * **typeorm_metadata.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string;
      /**
      * **typeorm_metadata.database**
      * - `varchar` in database
      * - Nullable, no default
      */
      database: string | null;
      /**
      * **typeorm_metadata.schema**
      * - `varchar` in database
      * - Nullable, no default
      */
      schema: string | null;
      /**
      * **typeorm_metadata.table**
      * - `varchar` in database
      * - Nullable, no default
      */
      table: string | null;
      /**
      * **typeorm_metadata.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **typeorm_metadata.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
    }
    export interface Whereable {
      /**
      * **typeorm_metadata.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **typeorm_metadata.database**
      * - `varchar` in database
      * - Nullable, no default
      */
      database?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **typeorm_metadata.schema**
      * - `varchar` in database
      * - Nullable, no default
      */
      schema?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **typeorm_metadata.table**
      * - `varchar` in database
      * - Nullable, no default
      */
      table?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **typeorm_metadata.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **typeorm_metadata.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **typeorm_metadata.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **typeorm_metadata.database**
      * - `varchar` in database
      * - Nullable, no default
      */
      database?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **typeorm_metadata.schema**
      * - `varchar` in database
      * - Nullable, no default
      */
      schema?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **typeorm_metadata.table**
      * - `varchar` in database
      * - Nullable, no default
      */
      table?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **typeorm_metadata.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **typeorm_metadata.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **typeorm_metadata.type**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **typeorm_metadata.database**
      * - `varchar` in database
      * - Nullable, no default
      */
      database?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **typeorm_metadata.schema**
      * - `varchar` in database
      * - Nullable, no default
      */
      schema?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **typeorm_metadata.table**
      * - `varchar` in database
      * - Nullable, no default
      */
      table?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **typeorm_metadata.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **typeorm_metadata.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **wallet_transactions**
   * - Table in database
   */
  export namespace wallet_transactions {
    export type Table = 'wallet_transactions';
    export interface Selectable {
      /**
      * **wallet_transactions.wallet_transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_transaction_id: string;
      /**
      * **wallet_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      transaction_id: string;
      /**
      * **wallet_transactions.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      wallet_id: string;
      /**
      * **wallet_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **wallet_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **wallet_transactions.wallet_transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_transaction_id: string;
      /**
      * **wallet_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      transaction_id: string;
      /**
      * **wallet_transactions.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      wallet_id: string;
      /**
      * **wallet_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampString;
      /**
      * **wallet_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **wallet_transactions.wallet_transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_transaction_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **wallet_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      transaction_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **wallet_transactions.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      wallet_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **wallet_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **wallet_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **wallet_transactions.wallet_transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_transaction_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **wallet_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      transaction_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **wallet_transactions.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      wallet_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **wallet_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **wallet_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **wallet_transactions.wallet_transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      wallet_transaction_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **wallet_transactions.transaction_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      transaction_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **wallet_transactions.wallet_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      wallet_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **wallet_transactions.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **wallet_transactions.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'wallet_transactions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = multisig_transactions.Table | multisig_users.Table | multisig_wallets.Table | typeorm_metadata.Table | wallet_transactions.Table;
  export type Selectable = multisig_transactions.Selectable | multisig_users.Selectable | multisig_wallets.Selectable | typeorm_metadata.Selectable | wallet_transactions.Selectable;
  export type JSONSelectable = multisig_transactions.JSONSelectable | multisig_users.JSONSelectable | multisig_wallets.JSONSelectable | typeorm_metadata.JSONSelectable | wallet_transactions.JSONSelectable;
  export type Whereable = multisig_transactions.Whereable | multisig_users.Whereable | multisig_wallets.Whereable | typeorm_metadata.Whereable | wallet_transactions.Whereable;
  export type Insertable = multisig_transactions.Insertable | multisig_users.Insertable | multisig_wallets.Insertable | typeorm_metadata.Insertable | wallet_transactions.Insertable;
  export type Updatable = multisig_transactions.Updatable | multisig_users.Updatable | multisig_wallets.Updatable | typeorm_metadata.Updatable | wallet_transactions.Updatable;
  export type UniqueIndex = multisig_transactions.UniqueIndex | multisig_users.UniqueIndex | multisig_wallets.UniqueIndex | typeorm_metadata.UniqueIndex | wallet_transactions.UniqueIndex;
  export type Column = multisig_transactions.Column | multisig_users.Column | multisig_wallets.Column | typeorm_metadata.Column | wallet_transactions.Column;
  export type AllBaseTables = [multisig_transactions.Table, multisig_users.Table, multisig_wallets.Table, typeorm_metadata.Table, wallet_transactions.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [multisig_transactions.Table, multisig_users.Table, multisig_wallets.Table, typeorm_metadata.Table, wallet_transactions.Table];


  export type SelectableForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.Selectable;
    multisig_users: multisig_users.Selectable;
    multisig_wallets: multisig_wallets.Selectable;
    typeorm_metadata: typeorm_metadata.Selectable;
    wallet_transactions: wallet_transactions.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.JSONSelectable;
    multisig_users: multisig_users.JSONSelectable;
    multisig_wallets: multisig_wallets.JSONSelectable;
    typeorm_metadata: typeorm_metadata.JSONSelectable;
    wallet_transactions: wallet_transactions.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.Whereable;
    multisig_users: multisig_users.Whereable;
    multisig_wallets: multisig_wallets.Whereable;
    typeorm_metadata: typeorm_metadata.Whereable;
    wallet_transactions: wallet_transactions.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.Insertable;
    multisig_users: multisig_users.Insertable;
    multisig_wallets: multisig_wallets.Insertable;
    typeorm_metadata: typeorm_metadata.Insertable;
    wallet_transactions: wallet_transactions.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.Updatable;
    multisig_users: multisig_users.Updatable;
    multisig_wallets: multisig_wallets.Updatable;
    typeorm_metadata: typeorm_metadata.Updatable;
    wallet_transactions: wallet_transactions.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.UniqueIndex;
    multisig_users: multisig_users.UniqueIndex;
    multisig_wallets: multisig_wallets.UniqueIndex;
    typeorm_metadata: typeorm_metadata.UniqueIndex;
    wallet_transactions: wallet_transactions.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.Column;
    multisig_users: multisig_users.Column;
    multisig_wallets: multisig_wallets.Column;
    typeorm_metadata: typeorm_metadata.Column;
    wallet_transactions: wallet_transactions.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    multisig_transactions: multisig_transactions.SQL;
    multisig_users: multisig_users.SQL;
    multisig_wallets: multisig_wallets.SQL;
    typeorm_metadata: typeorm_metadata.SQL;
    wallet_transactions: wallet_transactions.SQL;
  }[T];

}
